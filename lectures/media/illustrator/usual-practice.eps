%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 3394.000000 1582.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.1.2 (Build 23B2091) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 3394 1582
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 3394 1582
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Roboto-Regular
%!FontType1-1.0: Roboto-Regular 1.0000.2.0000
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
14 dict begin
/FontName /Roboto-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /D put
dup 34 /a put
dup 35 /t put
dup 36 /L put
dup 37 /i put
dup 38 /e put
dup 39 /r put
dup 40 /u put
dup 41 /A put
dup 42 /s put
dup 43 /m put
dup 44 /p put
dup 45 /o put
dup 46 /n put
dup 47 /T put
dup 48 /space put
dup 49 /P put
dup 50 /b put
dup 51 /l put
dup 52 /y put
dup 53 /M put
dup 54 /x put
dup 55 /k put
dup 56 /v put
dup 57 /c put
dup 58 /O put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1825 1 index div -555 2 index div 4188 3 index div 2163 5 -1 roll div]cvx def
/sfnts [<





50391A00082BB709544536261400082BB70A76604B361D00082BB70B83644E3A2300082BB70CD9B28A633C00082BB70D14100C090600082BB70E3C32271C1100082BB70F4034291D1400082BB71050412E211400082B00B2120B072BB00020457D691844B23F1A0173B25F1A0173B27F1A0173B22F1A0174B24F1A0174B26F1A0174B28F1A0174B2AF1A0174B2FF1A0174B21F1A0175B23F1A0175B25F1A0175B27F1A0175B20F1E0173B27F1E0173B2EF1E0173B21F1E0174B25F1E0174B28F1E0174B2CF1E0174B2FF1E0174B23F1E0175B26F1E0175B22F200173B26F200173000000
00>] def
/CharStrings 27 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/D 3 def
/L 4 def
/M 5 def
/O 6 def
/P 7 def
/T 8 def
/a 9 def
/b 10 def
/c 11 def
/e 12 def
/i 13 def
/k 14 def
/l 15 def
/m 16 def
/n 17 def
/o 18 def
/p 19 def
/r 20 def
/s 21 def
/t 22 def
/u 23 def
/v 24 def
/x 25 def
/y 26 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1825 -555 4188 2163} readonly def
/UniqueID 4033642 def
currentdict end
currentfile eexec

4B444A920BDD452167385273897531F0B1242A55100530AE3B467B4B2EFD87BD57422C3B47810258EC225A70ED7F81DB03E24ECAA0F210AFC5ADA9A66CE4D778B26CB1F71EFB97CA26BDEF001FB5E3F1332D7B4DED2A95B301FD8F6B94DF3D065279E3122D4E503599CA70EC52AE65E5C3664DD1772053D670E139F769CDDA830D6DC63E6D846ECBB62F21E9D853305BFEB5470E119AEB00AD37A9F781C1CDBCD90F49A19144DBDE5C6B51A42326CE943A64E57B8C4F3EDBC4AFFBC288FDDD13B710A6BD015C69B57E43329B809C13DB221613CA431C9EF3C064D2E444149BBE9DE9546846F4D8CE7FCDAFC8B47EC840040E8ADB8D483A7AFEFCEAA353F5FF1C9BD0B7B81D1EBEEB3959EA6559B903CF723C12085EEB73CCB8D159F1A532D3B6E411985C2FF8CAE47E447E4709A460B747A1D0D5B2BB07B83AFF66C97BB823F5F96019FB401962B4D19B58A4824DFBD9528D68377E74E8D72615110801D13EA3B01214F4BCA76225B1A6491FB92996C4B15EE645EDDCD7102E01788BB71D7623989D661F886C1C14AA9AB8CE9891D98E93C29EE37E4C88CFC231604726DEF6E66C4D99E0476FD8A92B2092A2FC81D194AF62DE27BD9A7A8764E71ABBDE7E538E6B1F557274E00A8AB24C193A7D9990E79D2E59A2CCD0BCDBD0762ED090671747E6569161A635E4DD7A6CF29F988A3D2D1DC3E34BD4D3825F49EAB95BC294127D89D7A1748F7C7F53589397B4C996FF5940C3B0DA463F4497F4324C683D1F2991AE5E352208D683CA7152971D016A2840605287F948AB9BAF587BFD6FA8B3842F52B80B6E880D38EB530B3162F18D7164D4AEFA096D0FEC334E20461513CF811D24B9C41BBA8732826861CA4C4EAA6177DBF2CD555542A63FE9FBF99A5B9BC8ED52ACDF74D3EA5A6F79E157C06D306689AB00DC767367768DF93538B604FF4203B273865E64A4EA638F15B10EF0569D20DDAC5E35ECF008E95C43CF10A1E36A207F0DCF5188E8392AFC89888C727B2F1DB6EF9D1E1F36E55528FB299C0490B9B53616AA17482BDC23CFC4430DCFDA5D931EDDF9820607AD966B417ADE5F8C05CB765A5E69B83FF27C84B642CE0B7ECF5D5CED79F28CA720ABD601D5D7FBEB6D77FE2000301F94C9BDAB5D039575F9D3B135DB8B7CCD70355B1174712AE578413070EFBA15CF0274A157F46219231247CE9C7997D5EF4AFAD9EB7D315ADAEE644A223E387908F34D1F3DB60F8F90BAE9D48CB5A52890C5BDC8898CC6940F9FE8EC7C02A4224A8A7B127DFB4490B6AD5EE9542982F81538DD01C702FCF4A114FDEBE44B4197A74CF26F2BFA5E70A08879A96822454D49A1DC9A88BFEED9465F88DD798589856B28680C18CFCF3FF52B523B8B2A14CE5EA55D5314A4B1F34B3289EFC43D841D77553091349565F16C5DB5F64A1FC740AE77427844D77D0948CF2451

1B20445858887776408B10087268B4B752DA4FBD33342B245F17B17D7E9AE97D2F85222E90D4DCD237C043E29CACEDC444C40F5B875F2F9A943CF9F057E04574F207D366CB9726F2CE3BD1A5BE9753A968D285691BAFF261CCF9FFDDEBF7BBD768D4DED0E70868EDA3EFAD998E493D1C66B61557225C43B9279A39AEB8B2BAAD5C3E7FCF0D52729781A4E54801CDEA99646C30FB9E3FCED28DA06842D9FE4FB418CDBF4047CB9E5DCF97B49DC05AA1535E8199513E0CF825100E5DD38E45A68BD3EF2BC5C2ACEBABBE226A543137C042A03ECDAD869545F432FBB02C52DA6CECF0A90D48810EB9EED89E54698A76250472E77BAFA72F5EF780929F396C0831BF632F11E8F58D2FAF2D34630E7A43DBA076013A693A042AFBB1F235FB27C7129640E2D344203EB8AFDC471038105948E87E9B4A5EB9B08C56F64F37BA8FB4E8CF561E27B5D61B182F182D1D6A253CB313221C415A30753583C46861FCAD75D7F5C43ED7E4ABAD7974DC605F27002C57FAC1DFE563A9A0DC77D8F30125FAB1DEC842B3620E26E468900D37D575270E8FF8BE37460C6426C4E41611B4C148AC0174EB8F89C1EE1A12D3DE434E09CD2F7E5B900217E90A8F58D1B24CB918612D0EFFA32E9BE67F4DB2123936B3E9C8D4A6D0CFBD887C7828485DD17A915E364E8876F6738C5D928C692A66B43BD91040E6019B62FC7F266D04B0C5F9DECA6636FD70F7AC2709D5225E59FF4F1A44381D8BD9000EAED38C50F1D3112ABF4236C78FD5154CD664A76E1CC19AAC61E9C0F4ADF743986FA9DB9770CE2C6DD3F5C21DCAC207A8B35C194018346EC5153E482EC60CB67CCBD9766BD0FEAD6158BD8A926EE2E0571C3378F0A88482AB0723B55E0D16A1AEF253876677D26DDE70EE43F5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/Roboto-Regular cguidfix
/F1.1/Roboto-Regular renmfont
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /zero put
dup 34 /one put
dup 35 /two put
dup 36 /three put
dup 37 /four put
dup 38 /five put
dup 39 /six put
dup 40 /seven put
dup 41 /S put
dup 42 /C put
dup 43 /O put
dup 44 /T put
dup 45 /Q put
dup 46 /A put
dup 47 /L put
dup 48 /Y put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<





02F8002602F8002602880025023E0002028800020000004800F4011A01A2028802CE036604260452048204F0051005B0066406F8071E074C0001000000110096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 17 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/two 3 def
/three 4 def
/four 5 def
/five 6 def
/six 7 def
/seven 8 def
/A 9 def
/C 10 def
/L 11 def
/O 12 def
/Q 13 def
/S 14 def
/T 15 def
/Y 16 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4399364 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB2829775B70D17B42EDA8CC4658DDF1D1ECA31288756CA6F91C8712AF5F303CB1D43FFFE152B07A49BE9F7ACDF83CAF577699BD6524656A60B1C98BDFC538133EF24A97B49DBF0161B36769464C7014CDEF0ECB57F7BE3A218E74CF31F86CAAB9F837BD9AB5FBFBD722B9222DDCDCC730FFB8DD09527AA9032FF9B572DFAFF0DA9E526DDE155326CD8B9F9820C9F620E57C2CACDAA03E8029C8FC815E053B6C8EEF28D521A264DACD7341E2BB744CEEA3E0887DD78611C3AFA1D697648549EEAB14704994568BF04483B3BCE5D70933BC1B5360B072C35293AF15197B4B45327AE05B38CD025761F05AAFB16E6E0AF3C5807F767E3B34F5C5A370B54E427D84928AF15B0C22F2864C57683B8970ABC9215A3202E76BA74D2511FD6FF9F059A6CCA1A5C958D328BC84FE9EFE42C286A77C624D9DA6A3BEB127DC61A32D3C5186A295E48466C8E098D7B4BC513B2B4B617B0406AB86D64BE1A6633B4E18531E6B6F98EC2C6697F0AEB787859E81A907EAE9E191C8D4008ABE4E92C52033047FA67031F12D1B286D48BEA827AC56C3D006F4295970BC6C072CAB4E0DA519E7BF85A944DF64802A84A3756D6FCE978F04F52A4B5E91F64A881B94A9220650C08F087ED3346A66BA6089DC5FC2A8757FAD8D1168090A8EA2497AD8E7A472190DBB080EB87FBB5AB3104C0A6B60DFABC3AB509E10AF585E1699E808A7C55A6F7599915C90410D27FD74A514C57F0E99C0C8FD499027ADCFD144D461C6A6C67E6AA854F30E4CC8799

B2ED87AC43DE694146EB2984687CB00D0D44A84F466384BDBD595AC33E7C8BB4A250BDD71B5D1E6A8B3ECCA3241CE16E2A256054FA3DA6B6E3925274F8824B504392C48447998A88939E9529AE41604129C11F9A7B2C2CC4B1AA2A8E8FF71509638C8F846151BA9D02F96C15C0922A3557CBF28C925E0C8E62E58C17B17E76EB1F7E79B54D6055924862976FAF476340D905061070F1FCFEF8929C93E789576392901E628AFF471F2F0570B3783DAEC9F3836469CCDE05A68DA3D7D3DBAE1A52EB85DD8836628A74F1C6ACF13E2BC19AFD7ABEB6411248F0634FEBA7406D0B0DD466D8947FE24CBBECFC79B6AC050DAB9D7A20BBD6A7F07B7B07F8C3C6A1329240EA07C4B2688EDB47575296C0B1D4799AF4C34793BDCC87D975BF107D452860BB499824C185B456E6D689456639B8B539B778588EAA1F11CD96C739554431F985AFF6356B0227789FA97592B665FA46CFF90F708EB36522AF47F3CAC3661EF00F94C0D4DECD0034A796D3FCBEA5DA2579C9B809D3E1E68FE63FBD773FCF0A956F5024802BF306A654289B079C0793E0FFC31E93C5D23BCCE9B7C22D6E60E7A8B0C604D968788C6CAA74C7D3F6ED66C33ECF4B9D5BA53599FABD03AA5FF7B4251BF54B5AFD6812D8D4010BD33619C87F573B8C012E3031D3309623C5CF54A808420CCCCA48E4D6E40176BC3E0068C88597052EEFC3F0A2FDF2904C1A1D6DA2118FA1C3879812A12DF72CBBCBBC7BB925407ECA513BEC0511BED063CE20216FF00DBA3B2F457566ADE684A57F2E90FA2C34C4AF0A9FF16DECADB523CA6933BC85D9C869806B4E818885A0ECC54A28FB00EF9F3C6531A10BB0E20E641C43BE1AE8CC84EEA22769953DC1F5DBBCA4CB7CA162F234004C8040AF9B5694F6EA77663D012925D7061788CBAAD1611CE8AA88B197B58657D989C5054856D7B3498C69D58D52854EC7250489130CB414243EB6D72A0EBD44907FAF0A74E4F3D1C521A72E6996C9F98F2CEAEEBD90AED3F62CE3401A1E51C595976210673A37B204B05531E5313F4A8E8225B1E18E81DF36C956F752D6E2D33A031C0DC5F826DDA31E1FF56B5089A73FFAF6B30811B7675C18F410B3A16ADDB1705EC41D9639F2B67B3058746CAC0C86A10E53A87D2CDCC531D8CF3EEC78614D2DD4CCFCE8406ACEDACD295DFA1ABCEB9B32B1157AA1FF709CFA46275C781F3EBAD976B7727DF2F1CB0C009BCF737C1666C60409C63845D03B02FBCF0A4A7E81179966C12A61F6F25C8BCC9E3660E3BB39D83AE18F585179F7E113411381B8D8B45B88BB721A2340F20D3368D866025A9B49EBDBDF2725C70FBDFBB078F417A1949CC420AFD778F8DACA748205628EDE45970301BAF1640727B42605DD87D010A789392AD1C6D8FDDF12FEFF2ECCD1C212AC87DB6F5089EC2BCFA8939EED02BB808D43F600B58DE4CAFEF0
CB2611ED7E4A2CD79D2EB1D3DF4BF9A5291AE7C18FCC345C8EBD9AA781F8FCDA05C940D112F1BE9FE0246A65775084BD2C904FD73B1292A8D08CCD182453048FFF2D121F6B71306E79E1A30F5C684CABC4B42475085FE1BE9F7D6D7271BB912A39680E63EF4D0CCCF93ECBE68DA33A7A8B1AC7299128C55E9460EEF4D87602ACBBC7E615B7C8263B9FDF880D175524B9371015C3792B3DDC6112468224964812D702229C6D03B77F01F97C8540A2F54FE02455DFFFB009009E5AC941CB2CFB7E4944411915011DB94BDB46919EF54A5CD508758943AD071406ED5EB3863EA285013D3171FE2FD5CFC09C9BECF68F124478211148FA5AEB99B3C9D09912A412910989933661144E5013EFFFF0D75754138556573DEC8130174E7A1F7F716B997E2F64E705E13D3487C020DAD3FFB9E35DA5DEFD087F085CF4167C8B4CC77E24359D8E8B15936725C74200CB9ADEE1109545B16D2A16CC25FF749D4E2F8A9C0E127B2C519B020DB15162D95E0380C01C93D90AD56ECE9C259BB5C3FD4B57E302AD8877C8A9AB4C7D9451F0DE8A80168F5CE90A9863718D305539516E56493C09036B5AC0E55F65FE2CE0CE762C9E15401F6E57A0779847F4A683FA355EDD9C81BB6CE707DDFA56519E2EB6762F33AE54B82F47E0CFDE4FA9F4567E5474CBD166D0C19F0F8440BBE360208C7918C6D6C4A433632C0D357EA4D809C30CBA21F295E37F2ECAFAFC9189ACF89AB4417F357592DAB98987226C53FF03B0218EE4C0087E079F4F84C6B67D3847B73DE8FC27B682A2A2DAE027A1399408023A8855EEA965650BE11796B41AD16154C4AD0DF4CF11B7D9B091972C913771F1D99C8B04CDDA0128A5FE77B06EDF36479029C8CEFBD34E421501C7A9DC6019F161E34D1F49EE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F2.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 3394 1582 rc
0 1582 m
3394 1582 l
3394 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-4400.3208 4231.1318 m
8769.4902 4231.1318 l
8769.4902 -3629.2454 l
-4400.3208 -3629.2454 l
h
-4400.3208 4231.1318 m
f
0 0 0 sc
298.25583 1452.7928 m
275.70251 1459.8201 244.39058 1464.1661 209.66829 1464.1661 c
174.946 1464.1661 143.63498 1459.8188 121.07762 1452.7928 c
100.88546 1446.5021 88.395264 1438.7886 88.395264 1431.1458 c
88.395264 1423.5042 100.88483 1415.7906 121.07762 1409.4985 c
143.63094 1402.4714 174.94289 1398.1254 209.66829 1398.1254 c
244.39368 1398.1254 275.70157 1402.4727 298.25583 1409.4985 c
318.448 1415.7894 330.9382 1423.5028 330.9382 1431.1458 c
330.9382 1438.7874 318.44861 1446.5009 298.25583 1452.7928 c
h
330.9382 1350.4358 m
330.9382 1342.7942 318.44861 1335.0807 298.25583 1328.7887 c
275.70251 1321.7615 244.39058 1317.4154 209.66829 1317.4154 c
174.946 1317.4154 143.63498 1321.7627 121.07762 1328.7887 c
100.88546 1335.0795 88.395264 1342.793 88.395264 1350.4358 c
88.395264 1409.5253 l
95.55584 1404.4161 105.26633 1399.9535 116.96761 1396.3081 c
140.80862 1388.8788 173.59113 1384.2849 209.66299 1384.2849 c
245.73488 1384.2849 278.51987 1388.8788 302.3584 1396.3081 c
314.06464 1399.9535 323.76984 1404.4161 330.93073 1409.5253 c
330.93073 1350.4358 l
h
330.9382 1269.725 m
330.9382 1328.8176 l
323.77762 1323.7085 314.06714 1319.2458 302.36584 1315.6003 c
278.52484 1308.1711 245.74234 1303.5773 209.67046 1303.5773 c
173.59859 1303.5773 140.8136 1308.1711 116.97507 1315.6003 c
105.26881 1319.2458 95.563614 1323.7085 88.402725 1328.8176 c
88.402725 1269.725 l
88.402725 1262.0834 100.8923 1254.3699 121.08509 1248.0779 c
143.63841 1241.0507 174.95035 1236.7046 209.67575 1236.7046 c
244.40115 1236.7046 275.70905 1241.0519 298.26331 1248.0779 c
318.45547 1254.3687 330.94565 1262.0822 330.94565 1269.725 c
h
330.9382 1189.0142 m
330.9382 1181.3726 318.44861 1173.6591 298.25583 1167.3671 c
275.70251 1160.3398 244.39058 1155.9938 209.66829 1155.9938 c
174.946 1155.9938 143.63498 1160.3411 121.07762 1167.3671 c
100.88546 1173.6578 88.395264 1181.3713 88.395264 1189.0142 c
88.395264 1248.1068 l
95.55584 1242.9977 105.26633 1238.535 116.96761 1234.8895 c
140.80862 1227.4603 173.59113 1222.8665 209.66299 1222.8665 c
245.73488 1222.8665 278.51987 1227.4603 302.3584 1234.8895 c
314.06464 1238.535 323.76984 1242.9977 330.93073 1248.1068 c
330.93073 1189.0142 l
h
344.77487 1189.0142 m
344.77487 1188.9401 344.77487 1188.8684 344.77124 1188.7943 c
344.60724 1174.4766 328.43472 1162.3005 302.36502 1154.1777 c
278.52399 1146.7485 245.74149 1142.1547 209.66962 1142.1547 c
173.59775 1142.1547 140.81276 1146.7485 116.97423 1154.1777 c
90.905457 1162.3018 74.732811 1174.4745 74.568001 1188.7943 c
74.568001 1188.8684 74.564362 1188.9401 74.564362 1189.0142 c
74.564362 1431.1436 l
74.564362 1431.2177 74.564362 1431.2893 74.568001 1431.3634 c
74.731987 1445.6812 90.904518 1457.8573 116.97423 1465.9769 c
140.81525 1473.4061 173.59775 1478 209.66962 1478 c
245.74149 1478 278.52646 1473.4061 302.36502 1465.9769 c
328.43378 1457.8529 344.60641 1445.6802 344.77124 1431.3634 c
344.77124 1431.2893 344.77487 1431.2177 344.77487 1431.1436 c
h
116.07607 1370.7916 m
115.59504 1370.9629 l
111.99843 1372.231 108.05291 1370.3434 106.7848 1366.7465 c
105.51665 1363.1499 107.4043 1359.2043 111.00116 1357.9363 c
111.48219 1357.765 l
115.07881 1356.4968 119.02432 1358.3845 120.29244 1361.9813 c
121.56059 1365.578 119.67294 1369.5234 116.07607 1370.7916 c
h
116.07607 1290.5627 m
119.67268 1289.2946 121.5618 1285.3491 120.29244 1281.7526 c
119.02429 1278.1559 115.07881 1276.2667 111.48219 1277.5361 c
111.00116 1277.7074 l
107.40455 1278.9756 105.51544 1282.921 106.7848 1286.5177 c
108.05294 1290.1143 111.99843 1292.0034 115.59504 1290.734 c
h
116.07607 1209.8519 m
115.59504 1210.0232 l
111.99843 1211.2914 108.05291 1209.4037 106.7848 1205.8069 c
105.51665 1202.2102 107.4043 1198.2646 111.00116 1196.9966 c
111.48219 1196.8253 l
115.07881 1195.5571 119.02432 1197.4448 120.29244 1201.0416 c
121.56059 1204.6383 119.67294 1208.5839 116.07607 1209.8519 c
h
140.01411 1363.0703 m
139.52945 1363.2416 l
135.93283 1364.5098 131.98732 1362.6221 130.71921 1359.0253 c
129.45105 1355.4286 131.3387 1351.4832 134.93556 1350.215 c
135.42024 1350.0437 l
139.01685 1348.7756 142.96237 1350.6632 144.23048 1354.2601 c
145.4986 1357.8569 143.61098 1361.8022 140.01411 1363.0703 c
h
140.01411 1282.8416 m
143.61073 1281.5734 145.49983 1277.6279 144.23048 1274.0312 c
142.96234 1270.4347 139.01685 1268.5455 135.42024 1269.8149 c
134.93556 1269.9862 l
131.33896 1271.2543 129.44984 1275.1998 130.71921 1278.7964 c
131.98735 1282.3931 135.93283 1284.2821 139.52945 1283.0128 c
h
140.01411 1202.1307 m
139.52945 1202.302 l
135.93283 1203.5701 131.98732 1201.6825 130.71921 1198.0856 c
129.45105 1194.489 131.3387 1190.5435 134.93556 1189.2754 c
135.42024 1189.1041 l
139.01685 1187.8359 142.96237 1189.7236 144.23048 1193.3204 c
145.4986 1196.9174 143.61098 1200.8625 140.01411 1202.1307 c
h
166.71321 1356.0177 m
166.22855 1356.189 l
162.63193 1357.457 158.68642 1355.5695 157.4183 1351.9725 c
156.15015 1348.376 158.0378 1344.4304 161.63466 1343.1624 c
162.11934 1342.9911 l
165.71594 1341.7229 169.66147 1343.6106 170.92958 1347.2074 c
172.19772 1350.8041 170.31007 1354.7495 166.71321 1356.0177 c
h
166.71321 1275.7888 m
170.30983 1274.5206 172.19893 1270.5752 170.92958 1266.9786 c
169.66144 1263.382 165.71594 1261.4929 162.11934 1262.7622 c
161.63466 1262.9335 l
158.03806 1264.2017 156.14894 1268.1471 157.4183 1271.7438 c
158.68645 1275.3403 162.63193 1277.2295 166.22855 1275.9601 c
h
166.71321 1195.078 m
166.22855 1195.2493 l
162.63193 1196.5175 158.68642 1194.6298 157.4183 1191.033 c
156.15015 1187.4363 158.0378 1183.4908 161.63466 1182.2227 c
162.11934 1182.0514 l
165.71594 1180.7832 169.66147 1182.6709 170.92958 1186.2678 c
172.19772 1189.8644 170.31007 1193.8099 166.71321 1195.078 c
h
166.71321 1195.078 m
f
263.63733 6.5814567 m
263.63733 46.462646 l
263.51294 53.739216 266.8154 60.648846 272.55267 65.120514 c
297.20285 83.495399 313.67151 110.79808 318.42926 141.17308 c
318.71225 143.2099 317.90063 145.24672 316.29294 146.52789 c
314.68835 147.81218 312.52405 148.15424 310.59918 147.42969 c
308.67432 146.70514 307.27496 145.01971 306.91425 142.99535 c
302.62607 115.62425 287.78372 91.023849 265.57776 74.461884 c
256.89252 67.785477 251.85489 57.414814 251.97617 46.459538 c
251.97617 6.5783472 l
252.01659 4.5228724 253.13606 2.6384277 254.92412 1.621574 c
256.71216 0.60472029 258.90445 0.60472029 260.68939 1.621574 c
262.47745 2.6384277 263.59692 4.5197625 263.63733 6.5783472 c
h
263.63733 6.5814567 m
f
83.063393 97.697151 m
83.063393 55.835114 l
83.069611 48.692261 85.911827 41.844826 90.961891 36.794762 c
96.011948 31.744699 102.85939 28.902485 110.00224 28.896265 c
124.05473 28.896265 l
128.10349 28.890045 131.98431 27.279251 134.8483 24.415268 c
137.70917 21.551285 139.31998 17.670448 139.32307 13.621692 c
139.32307 6.5659084 l
139.32307 4.4824467 140.43323 2.5575769 142.23993 1.5158461 c
144.04352 0.47411522 146.26692 0.47411522 148.07051 1.5158461 c
149.8741 2.5575769 150.98735 4.4824467 150.98735 6.5659084 c
150.98735 13.621692 l
150.98114 20.761435 148.14203 27.608873 143.09196 32.658936 c
138.0419 37.708996 131.19757 40.551212 124.05783 40.55743 c
110.00535 40.55743 l
105.95348 40.563652 102.07265 42.174446 99.208664 45.038429 c
96.344681 47.902412 94.733887 51.786358 94.727669 55.835114 c
94.727669 70.643242 l
112.21942 70.643242 l
114.27489 70.680557 116.15934 71.803139 117.1793 73.591187 c
118.19615 75.379227 118.19615 77.571533 117.1793 79.359573 c
116.16245 81.147621 114.278 82.26709 112.21942 82.307518 c
94.727669 82.307518 l
94.727669 103.52773 l
94.727669 105.07633 94.115067 106.55963 93.02047 107.65112 c
91.92588 108.74571 90.442581 109.35831 88.897087 109.35831 c
66.386368 109.35831 l
65.935471 109.34588 65.515671 109.58221 65.291771 109.97402 c
65.067879 110.36584 65.080315 110.84783 65.319763 111.22721 c
93.835197 156.76173 l
94.416702 157.68842 94.724556 158.76123 94.724556 159.85272 c
94.668587 179.52744 100.07626 198.82901 110.3443 215.60864 c
120.61235 232.38829 135.33963 245.98987 152.88113 254.88968 c
154.70027 255.85678 155.8726 257.71323 155.9659 259.77182 c
156.05919 261.83041 155.06099 263.78326 153.33824 264.91516 c
151.61551 266.04398 149.4232 266.18079 147.57297 265.27588 c
128.3678 255.53026 112.20076 240.7097 100.82879 222.42188 c
89.456818 204.13406 83.315269 183.07866 83.072723 161.54437 c
55.427982 117.40296 l
53.845173 114.77843 53.241901 111.68122 53.720787 108.65553 c
54.202782 105.62985 55.735836 102.8716 58.052521 100.86588 c
60.369205 98.860153 63.320259 97.740685 66.383263 97.697151 c
h
83.063393 97.697151 m
f
341.8107 212.32797 m
340.2652 212.32797 338.78189 211.71538 337.68729 210.62077 c
336.59271 209.52618 335.9801 208.04288 335.9801 206.49739 c
335.97388 196.99742 331.39026 188.08519 323.66592 182.55623 c
315.94156 177.02728 306.02802 175.55643 297.0318 178.61009 c
295.44278 179.14807 293.69827 178.97392 292.24606 178.13121 c
290.79385 177.29161 289.7739 175.86427 289.44739 174.21928 c
287.63757 165.25728 281.77277 157.64487 273.56955 153.60855 c
265.3663 149.57224 255.75438 149.57224 247.55115 153.60855 c
239.3479 157.64487 233.48311 165.25728 231.6702 174.21928 c
231.33435 175.85806 230.31439 177.27917 228.8653 178.11566 c
227.4162 178.95526 225.6779 179.13252 224.08577 178.60698 c
215.40675 175.66837 205.85703 176.93089 198.2384 182.02449 c
190.61977 187.11809 185.80293 195.46126 185.19966 204.60361 c
184.5995 213.74597 188.28133 222.64888 195.16296 228.69714 c
196.41615 229.81039 197.13448 231.40564 197.13448 233.08174 c
197.13448 234.75784 196.41927 236.35309 195.16296 237.46634 c
188.29065 243.5177 184.61505 252.41751 185.22144 261.55365 c
185.82471 270.6929 190.64154 279.02985 198.25084 284.12033 c
205.86325 289.21393 215.40675 290.48267 224.08266 287.55338 c
225.67169 287.02786 227.41309 287.20822 228.86218 288.04782 c
230.31128 288.88742 231.33435 290.30542 231.66708 291.94418 c
233.47379 300.90619 239.33858 308.51862 247.53871 312.55804 c
255.73883 316.59436 265.35074 316.59747 273.55399 312.56424 c
281.75723 308.53104 287.62512 300.92175 289.43805 291.96286 c
289.70547 291.07971 290.11597 290.24634 290.65082 289.49692 c
291.4158 288.58578 292.42642 287.91409 293.56766 287.56583 c
294.70889 287.21753 295.92166 287.20822 297.0629 287.53784 c
305.72015 290.35828 315.19214 289.03046 322.73923 283.94308 c
330.28635 278.8526 335.06897 270.56851 335.70023 261.48834 c
336.33148 252.40817 332.73987 243.54259 325.97015 237.457 c
324.80405 236.39662 324.11371 234.9102 324.05463 233.33362 c
323.99554 231.75703 324.57391 230.22397 325.65918 229.07962 c
326.74445 227.93527 328.24332 227.27603 329.81989 227.24805 c
331.23477 227.24805 332.60614 227.76425 333.66653 228.70026 c
342.72803 236.66093 347.83408 248.19772 347.63504 260.25693 c
347.43604 272.31613 341.94751 283.67877 332.6279 291.33472 c
323.30829 298.99066 311.09674 302.16559 299.2272 300.01996 c
286.63004 336.0545 234.52795 335.8959 221.8717 300.12878 c
210.72673 302.00702 199.3019 299.23941 190.25284 292.46973 c
181.20688 285.69693 175.32965 275.51596 173.99251 264.29324 c
172.65536 253.07053 175.97646 241.79185 183.17528 233.08485 c
175.85207 224.40894 172.43768 213.08983 173.74373 201.81116 c
175.04979 190.53247 180.95811 180.29242 190.07248 173.51961 c
199.18684 166.7468 210.69254 164.0383 221.8717 166.04091 c
225.81784 155.4619 233.92157 146.96324 244.30156 142.51645 c
254.68156 138.07277 266.4267 138.07277 276.80356 142.51645 c
287.18356 146.96013 295.28729 155.4619 299.23343 166.04091 c
311.19934 164.01343 323.45135 167.32831 332.76163 175.11174 c
342.0719 182.89519 347.50757 194.36667 347.63193 206.5036 c
347.63193 208.0491 347.01935 209.53239 345.92474 210.627 c
344.83014 211.72159 343.34686 212.3342 341.80136 212.3342 c
h
341.8107 212.32797 m
f
75.881927 820.94373 m
75.881927 901.20984 l
75.881927 907.34515 78.402451 912.94629 82.448563 916.9975 c
86.529968 921.07397 92.132309 923.59589 98.266388 923.59589 c
329.50888 923.59589 l
335.65292 923.59589 341.2453 921.07538 345.29654 917.02924 c
349.37299 912.94781 351.8949 907.34552 351.8949 901.21143 c
351.8949 594.57867 l
351.8949 588.43469 349.37439 582.84229 345.32828 578.79102 c
341.24686 574.7146 335.65448 572.19269 329.51044 572.19269 c
98.267944 572.19269 l
92.115517 572.19269 86.504784 574.7132 82.45385 578.76428 c
78.40416 582.81396 75.88224 588.41632 75.88224 594.57837 c
75.88224 634.63373 l
90.806046 634.63373 l
90.806046 594.57837 l
90.806046 592.53766 91.652702 590.66956 93.005867 589.31622 c
94.359062 587.96307 96.22715 587.11639 98.268005 587.11639 c
329.5105 587.11639 l
331.56821 587.11639 333.44263 587.95819 334.79068 589.29803 c
336.13049 590.64636 336.97226 592.51929 336.97226 594.57819 c
336.97226 901.21094 l
336.97226 903.26862 336.13049 905.14307 334.79068 906.49109 c
333.44235 907.83093 331.5694 908.67267 329.5105 908.67267 c
98.268005 908.67267 l
96.210297 908.67267 94.335861 907.83093 92.987831 906.49109 c
91.64801 905.14276 90.806229 903.26984 90.806229 901.21094 c
90.806229 826.63232 l
97.708084 828.51392 104.96724 829.51965 112.45962 829.51965 c
135.14075 829.51965 155.67435 820.32568 170.53534 805.46381 c
185.39726 790.60187 194.59123 770.0636 194.59123 747.38806 c
194.59123 724.70691 185.39726 704.17334 170.53534 689.31232 c
155.67342 674.45135 135.14136 665.25647 112.45962 665.25647 c
100.15817 665.25647 88.483635 667.96643 78.001648 672.81567 c
71.473877 661.51056 l
74.898224 659.53546 l
78.455032 657.49475 79.680542 652.94672 77.639809 649.38898 c
33.666325 573.21826 l
31.625622 569.66144 27.077612 568.43591 23.519867 570.47662 c
3.7129869 581.89618 l
0.15617554 583.95392 -1.0559639 588.5163 1.0029939 592.07312 c
44.976475 668.20654 l
47.017181 671.76337 51.565189 672.98889 55.122936 670.94812 c
58.578682 668.95605 l
65.110176 680.26984 l
61.280342 682.9762 57.692123 685.99969 54.383152 689.30963 c
39.521225 704.17151 30.327251 724.70355 30.327251 747.38531 c
30.327251 770.06146 39.521225 790.60004 54.383152 805.46106 c
60.632915 811.71082 67.887093 816.95581 75.882301 820.93994 c
h
166.69287 673.99744 m
193.41528 673.99744 l
197.53682 673.99744 200.8772 670.6571 200.8772 666.53558 c
200.8772 636.57007 l
206.43071 636.57007 l
206.43071 703.95923 l
206.43071 708.08075 209.77109 711.42108 213.89261 711.42108 c
240.61504 711.42108 l
244.73656 711.42108 248.07693 708.08075 248.07693 703.95923 c
248.07693 636.57007 l
253.63045 636.57007 l
253.63045 768.07697 l
253.63045 772.19849 256.97083 775.53888 261.09235 775.53888 c
287.81476 775.53888 l
291.93628 775.53888 295.27667 772.19849 295.27667 768.07697 c
295.27667 629.10693 l
295.27667 624.98541 291.93628 621.64502 287.81476 621.64502 c
152.73804 621.64502 l
148.61652 621.64502 145.27612 624.98541 145.27612 629.10693 c
145.27612 633.22845 148.61652 636.56885 152.73804 636.56885 c
159.23439 636.56885 l
159.23439 666.5343 l
159.23439 670.65582 162.57477 673.99622 166.69629 673.99622 c
h
185.95338 659.07367 m
174.15509 659.07367 l
174.15509 636.57007 l
185.95338 636.57007 l
h
233.15157 696.49823 m
221.35327 696.49823 l
221.35327 636.57227 l
233.15157 636.57227 l
h
280.34976 760.61908 m
268.55145 760.61908 l
268.55145 636.57227 l
280.34976 636.57227 l
h
306.56064 652.19202 m
306.56064 669.2002 l
321.48444 669.2002 l
321.48444 652.19202 l
h
267.37289 613.74127 m
306.56064 613.74127 l
306.56064 637.86279 l
321.48444 637.86279 l
321.48444 606.27814 l
321.48444 602.15662 318.14407 598.81622 314.02255 598.81622 c
267.37476 598.81622 l
h
184.04065 819.79254 m
299.37735 819.79254 l
299.37735 804.86871 l
184.04065 804.86871 l
h
184.04065 848.42798 m
299.37735 848.42798 l
299.37735 833.50421 l
184.04065 833.50421 l
h
112.45663 877.06348 m
255.62778 877.06348 l
255.62778 862.13965 l
112.45663 862.13965 l
h
49.3153 747.39441 m
49.3153 764.82178 56.384766 780.61786 67.809288 792.03955 c
79.233498 803.46381 95.029564 810.53357 112.45445 810.53357 c
112.45445 795.60974 l
99.143623 795.60974 87.080376 790.21045 78.360313 781.48883 c
69.637451 772.76599 64.239418 760.70398 64.239418 747.39471 c
h
54.136494 654.36316 m
17.604391 591.08191 l
24.511221 587.09283 l
61.043324 650.38031 l
58.737804 651.70679 56.441982 653.03815 54.136494 654.36444 c
h
159.97946 794.91907 m
147.8192 807.07935 131.01375 814.60223 112.45477 814.60223 c
93.900139 814.60223 77.088776 807.07843 64.930069 794.91907 c
52.769806 782.75885 45.246952 765.94965 45.246952 747.39441 c
45.246952 728.83478 52.770737 712.02844 64.930069 699.86969 c
77.531281 687.26849 94.49968 680.18658 112.45477 680.18658 c
131.01437 680.18658 147.82076 687.71039 159.97946 699.86969 c
172.13972 712.02997 179.66258 728.83545 179.66258 747.39441 c
179.66258 765.94904 172.13879 782.76038 159.97946 794.91907 c
h
159.97946 794.91907 m
f
/Cs1 SC
0 sc
1 0 0 -1 511 900 cm
/F1.1[ 64 0 0 -64 0 0]sf
-372 -610 m
(!"#")[ 41.968750 34.812500 20.906250 0.000000 ] xS
-428.625 -50 m
($%#&'"#\('&)[ 34.437500 15.531250 20.906250 33.906250 20.406250 34.812500 20.906250 35.281250 21.656250 0.000000 ] xS
-480.89062 551 m
(\)**\(+,#%-.*)[ 41.750000 33.000000 33.000000 35.281250 56.093750 35.906250 20.906250 15.531250 36.500000 35.312500 0.000000 ] xS
15 w
1 J
1 j
0.60000002 i
/Cs3 SC
0 0 0 sc
387.74078 -203 m
295.38757 -203 l
295.38757 468.88635 l
395.74268 468.88635 l
395.74268 466.57812 l
S
907.38947 -203 m
999.74268 -203 l
999.74268 468.88635 l
899.38757 468.88635 l
899.38757 466.57812 l
S
/Cs1 SC
0 sc
0 i
/F1.1[ 72 0 0 -72 0 0]sf
488.28973 69 m
(/'".*%#%-.0)[ 40.324219 22.957031 39.164062 39.726562 37.125000 17.472656 23.519531 17.472656 41.062500 39.726562 0.000000 ] xS
477.51434 164 m
(1'-2"2%3%#4)[ 45.421875 23.660156 41.062500 40.394531 39.164062 40.394531 17.472656 17.472656 17.472656 23.519531 0.000000 ] xS
546.03387 259 m
(5"#'%6)[ 62.859375 39.164062 23.519531 24.363281 17.472656 0.000000 ] xS
21 w
0.60000002 i
/Cs2 SC
0.64705884 0.64705884 0.64705884 sc
-48.937775 -423.96118 m
162.95145 -236.33908 l
S
0 i
CM
703.89856 1109.8218 m
683.89545 1147.5692 l
664.00745 1125.1089 l
h
703.89856 1109.8218 m
f
0 J
0 j
1 0 0 -1 511 900 cm
192.89856 -209.82172 m
172.89545 -247.56924 l
153.00743 -225.1089 l
h
192.89856 -209.82172 m
S
1 J
1 j
0.60000002 i
0.64705902 0.64705902 0.64705902 sc
-34.221806 674.96118 m
177.6674 487.33908 l
S
0 i
CM
718.6145 439.17828 m
678.72339 423.89108 l
698.61139 401.43076 l
h
718.6145 439.17828 m
f
0 J
0 j
1 0 0 -1 511 900 cm
207.61453 460.82172 m
167.7234 476.10892 l
187.61142 498.56924 l
h
207.61453 460.82172 m
S
1 J
1 j
0.60000002 i
-59 125 m
155.44626 125 l
S
0 i
CM
706.44623 775 m
666.44623 790 l
666.44623 760 l
h
706.44623 775 m
f
0 J
0 j
1 0 0 -1 511 900 cm
195.44626 125 m
155.44626 110 l
155.44626 140 l
h
195.44626 125 m
S
/Cs1 SC
0 sc
/F1.1[ 64 0 0 -64 0 0]sf
1496 -79 m
(5"'7-80/'"9&)[ 55.875000 34.812500 21.656250 32.437500 36.031250 31.000000 14.593750 35.843750 20.406250 34.812500 33.500000 0.000000 ] xS
17 w
1 J
1 j
0.60000002 i
/Cs2 SC
0.64705884 0.64705884 0.64705884 sc
1459 43.690819 m
1954.9801 43.690819 l
S
0.64705902 0.64705902 0.64705902 sc
1459 82.690819 m
1954.9801 82.690819 l
S
1459 121.69082 m
1954.9801 121.69082 l
S
1459 160.69083 m
1954.9801 160.69083 l
S
1459.67 44.360821 m
1955.6501 44.360821 l
S
1459.67 83.360817 m
1955.6501 83.360817 l
S
1459.67 122.36082 m
1955.6501 122.36082 l
S
1459.67 161.36082 m
1955.6501 161.36082 l
S
1459 201.03082 m
1954.9801 201.03082 l
S
1459 240.03082 m
1954.9801 240.03082 l
S
1459 279.03082 m
1954.9801 279.03082 l
S
1459 318.03082 m
1954.9801 318.03082 l
S
/Cs1 SC
0 sc
0 i
/F2.1[ 28 0 0 -28 0 0]sf
1409 54.29882 m
(!)s
1409 93.968819 m
(")s
1409 132.29883 m
(#)s
1409 171.29883 m
($)s
1409 210.29883 m
(%)s
1409 248.62881 m
(&)s
1409 288.29883 m
(')s
1409 328.63882 m
(\()s
1464 9.6908188 m
(\)")[ 18.144000 0.000000 ] xS
1519 9.6908188 m
(\)#)[ 18.144000 0.000000 ] xS
1581.658 9.6908188 m
(\)$)[ 18.144000 0.000000 ] xS
1636.658 9.6908188 m
(\)%)[ 18.144000 0.000000 ] xS
1699.316 9.6908188 m
(*+\),)[ 20.216000 21.280000 18.144000 0.000000 ] xS
1801 9.6908188 m
(-./0)[ 21.280000 18.144000 12.460000 0.000000 ] xS
1897 9.6908188 m
(/0)[ 12.460000 0.000000 ] xS
21 w
0.60000002 i
/Cs2 SC
0.64705902 0.64705902 0.64705902 sc
1063.3876 155.742 m
1296.675 155.742 l
S
0 i
CM
1847.675 744.258 m
1807.675 759.258 l
1807.675 729.258 l
h
1847.675 744.258 m
f
0 J
0 j
1 0 0 -1 511 900 cm
1336.675 155.742 m
1296.675 140.742 l
1296.675 170.742 l
h
1336.675 155.742 m
S
/Cs1 SC
0 sc
/F1.1[ 64 0 0 -64 0 0]sf
2449.5759 -78.811295 m
(:\(#9-+&*)[ 44.000000 35.281250 20.906250 33.500000 36.500000 56.093750 33.906250 0.000000 ] xS
/Cs2 SC
0 0 0 sc
CM
2990.5759 661.51245 m
2960.3423 661.51245 2931.3459 673.52283 2909.9661 694.90259 c
2888.5864 716.28137 2876.5759 745.27875 2876.5759 775.51245 c
2876.5759 805.74622 2888.5864 834.74261 2909.9661 856.12238 c
2931.345 877.50208 2960.3423 889.51245 2990.5759 889.51245 c
3020.8098 889.51245 3049.8062 877.50208 3071.1858 856.12238 c
3092.5657 834.74353 3104.5759 805.74622 3104.5759 775.51245 c
3104.5398 745.28821 3092.5181 716.31323 3071.1479 694.94061 c
3049.7776 673.56799 3020.8003 661.5481 2990.5759 661.51245 c
h
2990.5759 875.26245 m
2964.1208 875.26245 2938.7488 864.75311 2920.0432 846.04523 c
2901.3376 827.33734 2890.8259 801.96759 2890.8259 775.51245 c
2890.8259 749.05737 2901.3354 723.68524 2920.0432 704.97974 c
2938.7512 686.27423 2964.1208 675.76245 2990.5759 675.76245 c
3017.031 675.76245 3042.4033 686.27185 3061.1086 704.97974 c
3079.8142 723.68762 3090.3259 749.05737 3090.3259 775.51245 c
3090.2981 801.96045 3079.7795 827.3136 3061.0779 846.01434 c
3042.3777 864.71558 3017.0217 875.23395 2990.5759 875.26245 c
h
2990.5759 875.26245 m
f
2958.0361 718.59796 m
2965.5127 732.37677 2967.7883 748.38287 2964.4487 763.69922 c
2956.783 763.69922 l
2954.9646 763.77527 2953.5376 765.28473 2953.5618 767.10498 c
2953.5618 770.14044 l
2953.5618 770.13953 l
2953.5378 771.95978 2954.9646 773.46832 2956.783 773.54529 c
2962.3335 773.54529 l
2962.3325 773.54529 l
2959.5122 782.24658 2957.7654 791.26044 2957.1318 800.38513 c
2957.1318 824.89514 2972.1658 839.04541 2995.4358 839.04541 c
3006.948 838.68079 3017.9407 834.16644 3026.3867 826.33368 c
3027.0808 825.78265 3027.5139 824.96716 3027.5825 824.08301 c
3027.6514 823.19977 3027.3499 822.32678 3026.7495 821.6745 c
3015.4712 808.08051 l
3015.4712 808.07959 l
3014.8921 807.44403 3014.1035 807.03955 3013.2493 806.94031 c
3012.3958 806.84009 3011.5347 807.05255 3010.8259 807.5387 c
3006.6143 811.19763 3001.468 813.61536 2995.9626 814.52069 c
2992.6934 814.60236 2989.5454 813.2757 2987.3208 810.87744 c
2985.0962 808.4801 2984.0088 805.24231 2984.3345 801.98785 c
2984.3345 795.37585 2988.9944 786.24872 2991.6804 773.5448 c
3008.1394 773.5448 l
3009.041 773.54297 3009.9058 773.18396 3010.5432 772.54474 c
3011.1804 771.90643 3011.5386 771.04181 3011.5386 770.1391 c
3011.5386 766.91882 l
3011.5293 766.03656 3011.1628 765.19513 3010.5217 764.58746 c
3009.8806 763.98071 3009.0217 763.65973 3008.1394 763.69867 c
2993.2771 763.69867 l
2994.2048 754.42883 2993.6667 745.06964 2991.6804 735.9682 c
3021.926 735.9682 l
3022.8103 735.95795 3023.6526 735.58777 3024.2603 734.94489 c
3024.8669 734.30103 3025.187 733.43921 3025.1462 732.55518 c
3025.1462 715.37726 l
3025.1638 713.56262 3023.739 712.06244 3021.926 711.98553 c
2961.4277 711.98553 l
2960.5378 712.01611 2959.6929 712.38257 2959.0627 713.01251 c
2958.4338 713.64246 2958.0664 714.48761 2958.0359 715.37732 c
h
2958.0361 718.59796 m
f
1 J
1 j
0.60000002 i
0.64705902 0.64705902 0.64705902 sc
1 0 0 -1 511 900 cm
2044.576 161.5807 m
2244.8865 161.5807 l
S
0 i
CM
2795.8865 738.41931 m
2755.8865 753.41931 l
2755.8865 723.41931 l
h
2795.8865 738.41931 m
f
0 J
0 j
1 0 0 -1 511 900 cm
2284.8865 161.5807 m
2244.8865 146.5807 l
2244.8865 176.5807 l
h
2284.8865 161.5807 m
S
0 0 0 sc
CM
3187.9866 575.97272 m
3183.7188 586.80286 3181.3784 598.27649 3180.9653 609.93256 c
3195.6047 609.93256 l
3195.6047 617.27509 l
3181.0115 617.27509 l
3182.8928 671.1969 3226.1221 714.42596 3280.0439 716.30762 c
3280.0439 701.71436 l
3287.3865 701.71436 l
3287.3865 716.35364 l
3308.772 715.66528 3329.4231 708.23102 3346.356 695.15228 c
3350.8535 700.98047 l
3302.6216 738.0614 3233.4646 729.01929 3196.3835 680.78943 c
3181.6067 661.51508 3173.5767 637.88147 3173.5767 613.60596 c
3173.5308 599.79272 3176.1465 586.11737 3181.1943 573.3139 c
h
3187.9866 575.97272 m
f
3364.3472 677.39209 m
3378.0227 660.27472 3385.7327 639.16571 3386.4199 617.27509 c
3371.8264 617.27509 l
3371.8264 609.93256 l
3386.4199 609.93256 l
3384.5383 556.01074 3341.2642 512.78162 3287.3872 510.89999 c
3287.3872 525.49329 l
3280.0447 525.49329 l
3280.0447 510.89999 l
3248.3796 512.0014 3218.9644 527.65021 3200.377 553.34979 c
3194.4111 549.03607 l
3215.1543 520.40009 3248.3779 503.42017 3283.7141 503.46716 c
3344.5654 503.46716 3393.8525 552.84637 3393.8525 613.65063 c
3393.8525 638.43127 3385.5005 662.47961 3370.1274 681.9364 c
h
3364.3472 677.39209 m
f
3324.5994 535.48682 m
3330.9585 539.15808 l
3334.584 532.87872 l
3328.2249 529.20746 l
h
3324.5994 535.48682 m
f
3358.1558 566.38818 m
3361.8271 572.74725 l
3368.1462 569.09888 l
3364.4749 562.73987 l
h
3358.1558 566.38818 m
f
3358.1558 660.79004 m
3364.6731 664.55316 l
3368.3445 658.19409 l
3361.8271 654.43103 l
h
3358.1558 660.79004 m
f
3324.6072 691.76392 m
3328.3013 698.16272 l
3334.6604 694.49139 l
3330.9663 688.09265 l
h
3324.6072 691.76392 m
f
3232.7979 694.48749 m
3239.1567 698.15881 l
3242.8281 691.79974 l
3236.469 688.12848 l
h
3232.7979 694.48749 m
f
3199.2549 658.09973 m
3202.9263 664.4588 l
3209.2056 660.83331 l
3205.5344 654.47424 l
h
3199.2549 658.09973 m
f
3232.8252 532.83563 m
3236.4736 539.15472 l
3242.8325 535.48346 l
3239.1843 529.16437 l
h
3232.8252 532.83563 m
f
3368.1458 723.74225 m
3368.1458 716.39966 l
3381.3164 716.39966 l
3334.9663 670.0495 l
3330.8359 671.51801 3326.4766 672.2981 3322.1167 672.34412 c
3321.7957 672.34412 l
3311.0112 672.34412 3300.6863 667.9386 3293.2046 660.13702 c
3283.7051 650.36224 l
3274.2974 660.18286 l
3266.8171 667.93835 3256.4917 672.34393 3245.7065 672.38995 c
3245.3853 672.38995 l
3234.8303 672.38995 3224.781 667.9386 3217.6206 660.22888 c
3202.7517 643.9834 3202.9812 619.11053 3218.0796 603.18597 c
3221.0166 600.15717 l
3174.6663 553.80701 l
3179.8521 548.6214 l
3226.1101 594.87952 l
3283.7031 534.8996 l
3349.3281 603.18542 l
3364.426 619.10956 3364.6099 643.9826 3349.8328 660.18127 c
3347.4924 662.70538 3344.8767 664.86212 3341.9397 666.65198 c
3386.5002 711.21246 l
3386.5002 698.04169 l
3393.8428 698.04169 l
3393.8428 723.74066 l
h
3223.3601 608.27997 m
3210.9697 621.40472 3210.7859 641.8717 3222.947 655.18036 c
3228.7292 661.42151 3236.8521 665.00098 3245.3879 665.00098 c
3245.6633 665.00098 l
3254.4744 665.00098 3262.8726 661.37549 3268.9753 655.04266 c
3283.7063 639.76093 l
3298.4373 655.0885 l
3304.5408 661.42151 3312.9387 665.00098 3321.7495 665.04675 c
3322.0247 665.04675 l
3324.4111 665.04675 3326.7517 664.72552 3329.0459 664.17487 c
3276.3635 611.4455 l
3254.3359 633.47314 l
3226.2051 605.34235 l
h
3344.4673 655.18036 m
3356.6284 641.82605 3356.4448 621.40454 3344.0544 608.27997 c
3283.7083 545.45508 l
3231.2549 600.0191 l
3254.3381 623.10217 l
3276.3657 601.07446 l
3336.5747 661.28345 l
3339.5117 659.67731 3342.1733 657.61218 3344.4678 655.17993 c
h
3344.4673 655.18036 m
f
12 w
1 J
1 j
0.60000002 i
/Cs3 SC
0 0 0 sc
1 0 0 -1 511 900 cm
2468.5759 391.18872 m
2767.1267 20.208164 l
S
ep
end
%%Trailer
%%EOF
